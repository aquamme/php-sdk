<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dapr/proto/common/v1/common.proto

namespace Dapr\Proto\Common\V1\StateOptions;

use UnexpectedValueException;

/**
 * Enum describing the supported concurrency for state.
 *
 * Protobuf type <code>dapr.proto.common.v1.StateOptions.StateConcurrency</code>
 */
class StateConcurrency
{
    /**
     * Generated from protobuf enum <code>CONCURRENCY_UNSPECIFIED = 0;</code>
     */
    const CONCURRENCY_UNSPECIFIED = 0;
    /**
     * Generated from protobuf enum <code>CONCURRENCY_FIRST_WRITE = 1;</code>
     */
    const CONCURRENCY_FIRST_WRITE = 1;
    /**
     * Generated from protobuf enum <code>CONCURRENCY_LAST_WRITE = 2;</code>
     */
    const CONCURRENCY_LAST_WRITE = 2;

    private static $valueToName = [
        self::CONCURRENCY_UNSPECIFIED => 'CONCURRENCY_UNSPECIFIED',
        self::CONCURRENCY_FIRST_WRITE => 'CONCURRENCY_FIRST_WRITE',
        self::CONCURRENCY_LAST_WRITE => 'CONCURRENCY_LAST_WRITE',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(StateConcurrency::class, \Dapr\Proto\Common\V1\StateOptions_StateConcurrency::class);

